// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package worker_driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageTaskPoolClient is the client API for ManageTaskPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageTaskPoolClient interface {
	AssignTaskToWorker(ctx context.Context, in *TaskAssigningRequest, opts ...grpc.CallOption) (*TaskAssigningResponse, error)
	AdmitTaskDoneByWorker(ctx context.Context, in *TaskSubmissionRequest, opts ...grpc.CallOption) (*TaskAdmissionResponse, error)
}

type manageTaskPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewManageTaskPoolClient(cc grpc.ClientConnInterface) ManageTaskPoolClient {
	return &manageTaskPoolClient{cc}
}

func (c *manageTaskPoolClient) AssignTaskToWorker(ctx context.Context, in *TaskAssigningRequest, opts ...grpc.CallOption) (*TaskAssigningResponse, error) {
	out := new(TaskAssigningResponse)
	err := c.cc.Invoke(ctx, "/driver.ManageTaskPool/AssignTaskToWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageTaskPoolClient) AdmitTaskDoneByWorker(ctx context.Context, in *TaskSubmissionRequest, opts ...grpc.CallOption) (*TaskAdmissionResponse, error) {
	out := new(TaskAdmissionResponse)
	err := c.cc.Invoke(ctx, "/driver.ManageTaskPool/AdmitTaskDoneByWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageTaskPoolServer is the server API for ManageTaskPool service.
// All implementations must embed UnimplementedManageTaskPoolServer
// for forward compatibility
type ManageTaskPoolServer interface {
	AssignTaskToWorker(context.Context, *TaskAssigningRequest) (*TaskAssigningResponse, error)
	AdmitTaskDoneByWorker(context.Context, *TaskSubmissionRequest) (*TaskAdmissionResponse, error)
	mustEmbedUnimplementedManageTaskPoolServer()
}

// UnimplementedManageTaskPoolServer must be embedded to have forward compatible implementations.
type UnimplementedManageTaskPoolServer struct {
}

func (UnimplementedManageTaskPoolServer) AssignTaskToWorker(context.Context, *TaskAssigningRequest) (*TaskAssigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTaskToWorker not implemented")
}
func (UnimplementedManageTaskPoolServer) AdmitTaskDoneByWorker(context.Context, *TaskSubmissionRequest) (*TaskAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdmitTaskDoneByWorker not implemented")
}
func (UnimplementedManageTaskPoolServer) mustEmbedUnimplementedManageTaskPoolServer() {}

// UnsafeManageTaskPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageTaskPoolServer will
// result in compilation errors.
type UnsafeManageTaskPoolServer interface {
	mustEmbedUnimplementedManageTaskPoolServer()
}

func RegisterManageTaskPoolServer(s grpc.ServiceRegistrar, srv ManageTaskPoolServer) {
	s.RegisterService(&ManageTaskPool_ServiceDesc, srv)
}

func _ManageTaskPool_AssignTaskToWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageTaskPoolServer).AssignTaskToWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.ManageTaskPool/AssignTaskToWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageTaskPoolServer).AssignTaskToWorker(ctx, req.(*TaskAssigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageTaskPool_AdmitTaskDoneByWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageTaskPoolServer).AdmitTaskDoneByWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.ManageTaskPool/AdmitTaskDoneByWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageTaskPoolServer).AdmitTaskDoneByWorker(ctx, req.(*TaskSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageTaskPool_ServiceDesc is the grpc.ServiceDesc for ManageTaskPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageTaskPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.ManageTaskPool",
	HandlerType: (*ManageTaskPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTaskToWorker",
			Handler:    _ManageTaskPool_AssignTaskToWorker_Handler,
		},
		{
			MethodName: "AdmitTaskDoneByWorker",
			Handler:    _ManageTaskPool_AdmitTaskDoneByWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_driver.proto",
}
